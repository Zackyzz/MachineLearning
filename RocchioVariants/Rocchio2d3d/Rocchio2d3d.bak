#lang racket
(require plot)

(define (file-lines->list path)
  (call-with-input-file path
    (λ (file)
      (for/list ([line (in-lines file)])
        (map string->number (string-split line))))))

(define (change-class dataset prev after)
  (map (λ(x) (if (= prev (car x)) (cons after (cdr x)) x)) dataset))

(define (2d-3d lst)
  (define x1 (second lst))
  (define x2 (third lst))
  (list (first lst) (sqr x1) (* (sqrt 2) x1 x2) (sqr x2)))

(define (normalize lst)
  (cons (first lst) (map (λ(x) (/ x 300.0)) (rest lst))))

(define temp-train
  (map normalize (change-class (change-class (file-lines->list "train-xor.txt") 2 1) 3 2)))
(define temp-test
  (map normalize (change-class (change-class (file-lines->list "test-xor.txt") 2 1) 3 2)))

(define train-set (map 2d-3d temp-train))
(define test-set (map 2d-3d temp-test))

(define decimal exact->inexact)

(define classes (sort (remove-duplicates (map first train-set)) <))

(define (euclidean-distance p q)
  (sqrt (apply + (map (λ(x y) (sqr (- x y))) p q))))

(define (get-points lst centroid)
  (if (empty? lst)
      empty
      (if (= (caar lst) centroid)
          (cons (cdar lst) (get-points (cdr lst) centroid))
          (get-points (cdr lst) centroid))))

(define (train-rocchio lst)
  (for/list ([i classes])
    (define class-points (get-points lst i))
    (map (λ(x) (decimal (/ x (length class-points)))) (apply map + class-points))))

(define (arg-min lst)
  (sort lst < #:key second))

(define (apply-rocchio centroids new-element)
  (caar (arg-min
         (for/list ([i centroids] [j classes])
           (list j (euclidean-distance i new-element))))))

(define trained (train-rocchio train-set))

(define (update-matrix r p matrix)
  (define (index r p i)
    (cond
      [(= r p i) 0]
      [(and (= r i) (not (= r p))) 1]
      [(and (= p i) (not (= r p))) 2]
      [else 3]))
  (for/list ([classX matrix] [i classes])
    (list-update classX (index r p i) add1)))

(define (test-rocchio centroids dataset)
  (let loop ([clone dataset]
             [error-matrix (make-list (length classes) (make-list 4 0))])
    (cond
      [(equal? empty clone) error-matrix]
      [else
       (define reality (caar clone))
       (define element (cdar clone))
       (define prediction (apply-rocchio centroids element))
       (loop (rest clone) (update-matrix reality prediction error-matrix))])))

(define error-matrix (test-rocchio trained test-set))

(define (cut-digits n)
  (decimal (/ (floor (* n (expt 10 4))) (expt 10 2))))

(define results
  (for/list ([i error-matrix] [j classes])
    (define TP (first i)) ;r p
    (define FN (second i)) ;r !p
    (define FP (third i)) ;!r p
    (define TN (fourth i)) ;!r !p

    (define Accuracy (/ (+ TP TN) (+ TP FN FP TN)))
    (define Precision (/ TP (+ TP FP)))
    (define Recall (/ TP (+ TP FN)))

    (printf "Class ~a:\n" j)
    (printf "Accuracy: ~a%\n" (cut-digits Accuracy))
    (printf "Precision: ~a%\n" (cut-digits Precision))
    (printf "Recall: ~a%\n" (cut-digits Recall))
    (printf "Error matrix: ~a \n\n" i)
    (map exact->inexact (list Accuracy Precision Recall))))

(map cut-digits (map (λ(x) (/ x (length classes))) (apply map + results)))

;-------------------------------------------------------------------

(define all-points
  (apply append
         (for/list ([i (in-range -300 300 3)])
           (for/list ([j (in-range -300 300 3)])
             (map (λ(x) (/ x 300.0)) (list i j))))))

(define (2d-to3d lst)
  (define x1 (first lst))
  (define x2 (second lst))
  (list (sqr x1) (* (sqrt 2) x1 x2) (sqr x2)))

(define testing-in3d
  (map (λ(x) (cons (apply-rocchio trained x) x)) (map 2d-to3d all-points)))

(define back-to2d
  (for/list ([i testing-in3d] [j all-points])
    (cons (first i) j)))

(define colors (list "Red" "Navy" "DeepPink" "DarkGreen" "Magenta"
                     "Maroon" "RoyalBlue" "Olive" "Coral"))

(define (go-plot2d)
  (plot-background "AliceBlue")
  (plot-width 600)
  (plot-height 600)
  (plot-x-label #f)
  (plot-y-label #f)
  (plot-new-window? #t)

  (plot (list
         (for/list ([i classes])
           (points (get-points back-to2d i)
                   #:x-min -1 #:x-max 1
                   #:y-min -1 #:y-max 1
                   #:sym 'fullcircle3 #:color (list-ref colors i)
                   #:alpha 0.1))
         (for/list ([i classes])
           (points (get-points temp-test i)
                   #:x-min -1 #:x-max 1
                   #:y-min -1 #:y-max 1
                   #:sym 'full6star #:color (list-ref colors i)
                   #:alpha 1)))))

(define (go-plot3d)
  (plot-background "AliceBlue")
  (plot-width 600)
  (plot-height 600)
  (plot-x-label "x")
  (plot-y-label "y")
  (plot-z-label "z")
  (plot-new-window? #t)

  (plot3d (list
           #|(for/list ([i classes])
             (points3d (get-points testing-in3d i)
                       #:x-min -1 #:x-max 1
                       #:y-min -1 #:y-max 1
                       #:z-min -1 #:z-max 1
                       #:sym 'full6star #:color (list-ref colors i)
                       #:alpha 0.1))|#
           (for/list ([i classes])
             (points3d (get-points test-set i)
                       #:x-min -1 #:x-max 1
                       #:y-min -1 #:y-max 1
                       #:z-min -1 #:z-max 1
                       #:sym 'full6star #:color (list-ref colors i)
                       #:alpha 1))
           (for/list ([centroid trained] [i colors])
             (points3d (list centroid)
                       #:x-min -1 #:x-max 1
                       #:y-min -1 #:y-max 1
                       #:z-min -1 #:z-max 1
                       #:sym 'fullcircle8 #:color "Black"
                       #:alpha 1)))))

(go-plot2d)
(go-plot3d)