#lang racket

(define trainset (file->lines "TrainingSVM1309.arff"))
(define testset (file->lines "TestingSVM1309.arff"))

;(define samples (string->number (first dataset)))
(define dimension (string->number (second trainset)))
;(define classes (string->number (third dataset)))

(define (split-set dataset) (map (Î»(x) (string-split x)) (drop dataset 3)))

(define (get-sample sample)
  (let loop ([clone sample] [new-sample (make-list dimension 0)])
    (cond
      [(equal? "#" (first clone))
       (define cls (string->number (substring (second clone) 1)))
       (cons (if (not cls) 0 cls) new-sample)]
      [else
       (define coordinate (map string->number (string-split (first clone) #rx"(:)")))
       (loop (rest clone)
             (list-set new-sample (first coordinate) (second coordinate)))])))

(define (get-dataset fileset)
  (for/list ([i fileset])
    (get-sample i)))

(define (normalize lst)
  (cons (first lst) (map (Î»(x) (/ x 10.0)) (rest lst))))

(define train-set (map normalize (get-dataset (split-set trainset))))
(define test-set (map normalize (get-dataset (split-set testset))))